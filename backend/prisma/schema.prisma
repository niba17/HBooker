generator client {
  provider = "prisma-client-js"
  // JANGAN LUPA: Tambahkan output path ini jika Anda menggunakan alias @generated/prisma
  // output = "../generated/prisma" 
}

datasource db {
  provider = "postgresql" // Ganti sesuai DB yang Anda gunakan (misalnya: "mysql", "sqlite")
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// MODEL YANG HILANG: Hotel
// Ini adalah definisi model 'Hotel' yang diperlukan oleh impor Anda.
// ----------------------------------------------------
model Hotel {
  id          String   @id @default(uuid())
  // ... (Field lainnya)
  updatedAt   DateTime @updatedAt
  
  rooms       Room[]
  bookings    Booking[]
  
  // PERBAIKAN: Hapus @map dari field relasi 'amenities'
  amenities HotelAmenity[] // Hapus @map("hotel_amenities_relation")
  
  @@map("hotels")
}

// ... (Model Amenity)

model Amenity {
  id        String   @id @default(uuid())
  name      String   @unique
  
  // PERBAIKAN: Hapus @map dari field relasi 'hotels'
  hotels    HotelAmenity[] // Hapus @map("amenity_hotels_relation")

  @@map("amenities")
}

// ----------------------------------------------------
// MODEL BARU: HotelAmenity (Tabel Perantara / Many-to-Many)
// PASTIKAN NAMA MODEL DIMULAI DENGAN HURUF BESAR: HotelAmenity
// ----------------------------------------------------
model HotelAmenity { 
  hotelId   String
  amenityId String
  
  // Relasi ke Hotel
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  
  // Relasi ke Amenity
  amenity   Amenity  @relation(fields: [amenityId], references: [id])
  
  @@id([hotelId, amenityId]) 
  @@map("hotel_amenities")
}

// Tambahkan model Room sebagai contoh relasi
model Room {
  id        String   @id @default(uuid())
  number    Int
  type      String
  price     Decimal
  
  // Foreign Key ke Hotel
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  
  @@unique([hotelId, number]) // Nomor kamar unik per hotel
  @@map("rooms")
}

model Booking {
  id        String    @id @default(uuid())
  checkIn   DateTime
  checkOut  DateTime
  totalCost Decimal
  
  // Foreign Key ke Hotel
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])

  // Anda juga perlu relasi ke model User/Client di sini
  // userId    String
  // user      User      @relation(fields: [userId], references: [id])
  
  @@map("bookings")
}